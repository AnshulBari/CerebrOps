name: CerebrOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: anshulbari/cerebrops

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,build,dist,.venv,__pycache__,.git
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=127 --statistics --exclude=venv,build,dist,.venv,__pycache__,.git

    - name: Test with pytest
      run: |
        # Create logs directory for tests
        mkdir -p logs
        # Run tests with proper Python path
        PYTHONPATH=. pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: [build]
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    name: Deploy to Kubernetes
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.K8S_TOKEN }}" > $HOME/.kube/token
        kubectl config set-cluster cerebrops --server=${{ secrets.K8S_SERVER }} --insecure-skip-tls-verify=true
        kubectl config set-credentials cerebrops --token=$(cat $HOME/.kube/token)
        kubectl config set-context cerebrops --cluster=cerebrops --user=cerebrops --namespace=cerebrops
        kubectl config use-context cerebrops

    - name: Update deployment image
      run: |
        sed -i "s|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}|g" k8s/deployment.yaml
        sed -i "s|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}|g" k8s/cronjobs.yaml

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        kubectl apply -f k8s/
        kubectl rollout status deployment/cerebrops-app -n cerebrops --timeout=300s

    - name: Run smoke tests
      run: |
        echo "Running post-deployment smoke tests..."
        chmod +x scripts/smoke-tests.sh
        APP_URL="${{ secrets.APP_URL }}" ./scripts/smoke-tests.sh || echo "Smoke tests failed but continuing..."

  anomaly-detection:
    needs: deploy
    runs-on: ubuntu-latest
    name: Run Anomaly Detection
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run anomaly detection
      env:
        APP_URL: ${{ secrets.APP_URL || 'http://cerebrops.local' }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python anomaly_detector.py

    - name: Send deployment notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        python -c "
        from alerts import SlackAlerter
        import os
        alerter = SlackAlerter(os.getenv('SLACK_WEBHOOK_URL'))
        alerter.send_slack_alert('ðŸš€ CerebrOps deployment completed successfully!', 'low')
        "

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'  # Fail on critical/high vulnerabilities
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Run Trivy SARIF scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail for SARIF output

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python
      continue-on-error: true

  performance-test:
    needs: build
    runs-on: ubuntu-latest
    name: Performance Testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start application for testing
      run: |
        docker run -d -p 5000:5000 --name cerebrops-test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 10

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export default function () {
          let response = http.get('http://localhost:5000/');
          check(response, { 'status was 200': (r) => r.status == 200 });
          
          response = http.get('http://localhost:5000/health');
          check(response, { 'health check passed': (r) => r.status == 200 });
          
          response = http.get('http://localhost:5000/metrics');
          check(response, { 'metrics endpoint working': (r) => r.status == 200 });
          
          sleep(1);
        }
        EOF

    - name: Cleanup
      if: always()
      run: |
        docker stop cerebrops-test || true
        docker rm cerebrops-test || true
